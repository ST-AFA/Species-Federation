Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/Burst_Phaser_Bank_COM"
	IconNameKey = "Parts/Burst_Phaser_Bank_COM_Icon"
	ID = "sparky.burstphaserbankcom_floor"
	EditorGroup = "Starfleet"
	DescriptionKey = "Parts/Burst_Phaser_Bank_COM_Desc"
	Resources
	[
		[steel, 24]
		[coil2, 4]
		[tristeel, 12]
		[diamond, 3]
	]
	Size = [1, 6]
	MaxHealth = 5500
	TypeCategories = [weapon, turret, uses_power, phaserbank, phaserbank_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [Phaser, CaptainsRoomBuff, AntimatterPower]
	IsRotateable = true
	IsFlippable = true
	CrewSpeedFactor = 0.8
	CrewCongestedSpeedFactor = .3	
	SelectionPriority = 1
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitedBy : ^/0/ProhibitedBy [phaserbank]
	Blueprints : ^/Blueprints/DrawProhibitedZoneCategories [phaserbank]
	ProhibitRects
    [
		[phaserbank, [0, -1, 1, 1]]
		[phaserbank, [-1, -1, 1, 3]]
		[phaserbank, [-1, 4, 1, 3]]
		[phaserbank, [-2, 2, 1, 2]]
        [phaserbank, [1, -1, 1, 3]]
		[phaserbank, [1, 4, 1, 3]]
		[phaserbank, [0, 6, 1, 1]]
		[phaserbank, [2, 2, 1, 2]]
    ]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [10.66, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle]
			Mode = All
		}
		IsOperational2
		{
			Type = MultiToggle
			Toggles = [PowerToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		// FireModeToggle2
		// {
		// 	Type = UIToggle
		// 	ToggleID = "fire_mode2"
		// 	Default = 1
		// 	ToggledOnChoices = [0, 1, 2]
		// }
		// AutoTargetToggle2
		// {
		// 	Type = ModeToggle
		// 	Mode = FireModeToggle2
		// 	OnModes = [1, 2]
		// }
		// AutoFireToggle2
		// {
		// 	Type = ModeToggle
		// 	Mode = FireModeToggle2
		// 	OnMode = 2
		// }
		// FireModeToggle3
		// {
		// 	Type = UIToggle
		// 	ToggleID = "fire_mode"
		// 	Default = 1
		// 	ToggledOnChoices = [0, 1, 2]
		// }
		// AutoTargetToggle3
		// {
		// 	Type = ModeToggle
		// 	Mode = FireModeToggle3
		// 	OnModes = [1, 2]
		// }
		// AutoFireToggle3
		// {
		// 	Type = ModeToggle
		// 	Mode = FireModeToggle3
		// 	OnMode = 2
		// }


		// FirePrefToggle
		// {
		// 	Type = UIToggle
		// 	ToggleID = "fire_pref"
		// 	Default = 1
		// }
		// FirePrefAttack
		// {
		// 	Type = ModeToggle
		// 	Mode = FirePrefToggle
		// 	OnModes = [0, 2]
		// }
		// FirePrefDefend
		// {
		// 	Type = ModeToggle
		// 	Mode = FirePrefToggle
		// 	OnModes = [1, 2]
		// }
		// AttackToggle
		// {
		// 	Type = MultiToggle
		// 	Toggles = [FireModeToggle, FirePrefAttack]
		// 	Mode = All
		// }
		// DefendToggle
		// {
		// 	Type = MultiToggle
		// 	Toggles = [FireModeToggle, FirePrefDefend]
		// 	Mode = All
		// }
		ReverseOperationLeft
		{
			Type = AreaBuffProvider
			BuffType = PhaserReverseOperation
			BuffArea = [-1, 0, 1, 6]
			OperationalToggle = IsOperational
			Criteria
			{
				Category = phaserbank_controller
			}
		}
		ReverseOperationRight
		{
			Type = AreaBuffProvider
			BuffType = PhaserReverseOperation
			BuffArea = [1, 0, 1, 6]
			OperationalToggle = IsOperational
			Criteria
			{
				Category = phaserbank_controller
			}
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 6000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		Graphics
		{
			Type = Graphics
			Location = [0.5, 3]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 6]
					}
					{
						File = "floor_33.png"
						Size = [1, 6]
					}
					{
						File = "floor_66.png"
						Size = [1, 6]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 6]
					}
					{
						File = "walls_33.png"
						Size = [1, 6]
					}
					{
						File = "walls_66.png"
						Size = [1, 6]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Location = [1, 1]
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 6]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 6]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 6]
					}
				]
			}
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, 3]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 6]
		}
	
	
			Turret
			{
				Type = TurretWeapon
				Location = [.5, 3]
				Rotation = 0d// Relative to unrotated part.
				OperationalToggle = IsOperational
				AutoFireToggle = AutoFireToggle
				//FireInterval = 2/30
				FireInterval = 8
				FiringArc = 200d
				RotateSpeed = 3600d
				FireThresholdAngle = 0.25d
				AIFirepowerRating = 400
				FirePermissionToggle = FireModeToggle
				AutoTargetCrewSafetyDist = 8
				IgnoreSourceShipLowLOSChecks = true
				IgnoreJunkLOSChecks = true
 				HoldTargetWhileFiring = 0.25
				Emitter = BeamEmitter
				AlwaysShowCoverage = true
				CanBeGivenExplicitTarget = false
				PreventOverlappingTargets = true
			

				AutoTargets
				[
					{
						TargetType = ShipParts
						Toggle = AutoTargetToggle
					}
			    ]
				BlueprintArcSprite
				{
					Texture = &/INDICATORS/WeaponArc
					Size = [0, 1.5]
					Color = [255, 0, 0, 63]
				}
				BlueprintArcRadius = 10
				BlueprintArcSpriteSegments = 64

				CoverageSectorArc
				{
					Texture = &/INDICATORS/VerticalGradient
					VertexColor = [255, 255, 255, 51]
					QuadCount = 64
				}
			}

			Turret2
			{
				Type = TurretWeapon
				Location = [.5, 3]
				Rotation = 0d// Relative to unrotated part.
				OperationalToggle = IsOperational
				AutoFireToggle = AutoFireToggle
				//FireInterval = 2/30
				FireInterval = 7
				FiringArc = 200d
				RotateSpeed = 3600d
				FireThresholdAngle = 0.25d
				AIFirepowerRating = 400
				FirePermissionToggle = FireModeToggle
				AutoTargetCrewSafetyDist = 8
				IgnoreSourceShipLowLOSChecks = true
				IgnoreJunkLOSChecks = true
				HoldTargetWhileFiring = 0.25
				Emitter = BeamEmitter2
				AlwaysShowCoverage = true
				CanBeGivenExplicitTarget = false
				PreventOverlappingTargets = true
			
				AutoTargets
				[
					{
						TargetType = ShipParts
						Toggle = AutoTargetToggle
					}
			    ]
				BlueprintArcSprite
				{
					Texture = &/INDICATORS/WeaponArc
					Size = [0, 1.5]
					Color = [255, 0, 0, 63]
				}
				BlueprintArcRadius = 10
				BlueprintArcSpriteSegments = 64

				CoverageSectorArc
				{
					Texture = &/INDICATORS/VerticalGradient
					VertexColor = [255, 255, 255, 51]
					QuadCount = 64
				}
			}

			Turret3
			{
				Type = TurretWeapon
				Location = [.5, 3]
				Rotation = 0d// Relative to unrotated part.
				OperationalToggle = IsOperational
				AutoFireToggle = AutoFireToggle
				//FireInterval = 2/30
				FireInterval = 6
				FiringArc = 200d
				RotateSpeed = 3600d
				FireThresholdAngle = 0.25d
				AIFirepowerRating = 400
				FirePermissionToggle = FireModeToggle
				AutoTargetCrewSafetyDist = 8
				IgnoreSourceShipLowLOSChecks = true
				IgnoreJunkLOSChecks = true
				HoldTargetWhileFiring = 0.25
				Emitter = BeamEmitter3
				AlwaysShowCoverage = true
				CanBeGivenExplicitTarget = false
				PreventOverlappingTargets = true
			

				AutoTargets
				[
					{
						TargetType = ShipParts
						Toggle = AutoTargetToggle
					}
			    ]
				BlueprintArcSprite
				{
					Texture = &/INDICATORS/WeaponArc
					Size = [0, 1.5]
					Color = [255, 0, 0, 63]
				}
				BlueprintArcRadius = 10
				BlueprintArcSpriteSegments = 64

				CoverageSectorArc
				{
					Texture = &/INDICATORS/VerticalGradient
					VertexColor = [255, 255, 255, 51]
					QuadCount = 64
				}
			}

			Turret4
			{
				Type = TurretWeapon
				Location = [.5, 3]
				Rotation = 0d// Relative to unrotated part.
				OperationalToggle = IsOperational
				AutoFireToggle = AutoFireToggle
				//FireInterval = 2/30
				FireInterval = 5
				FiringArc = 200d
				RotateSpeed = 3600d
				FireThresholdAngle = 0.25d
				AIFirepowerRating = 400
				FirePermissionToggle = FireModeToggle
				AutoTargetCrewSafetyDist = 8
				IgnoreSourceShipLowLOSChecks = true
				IgnoreJunkLOSChecks = true
				HoldTargetWhileFiring = 0.25
				Emitter = BeamEmitter4
				AlwaysShowCoverage = true
				CanBeGivenExplicitTarget = false
				PreventOverlappingTargets = true
				
				AutoTargets
				[
					{
						TargetType = ShipParts
						Toggle = AutoTargetToggle
					}
			    ]
				BlueprintArcSprite
				{
					Texture = &/INDICATORS/WeaponArc
					Size = [0, 1.5]
					Color = [255, 0, 0, 63]
				}
				BlueprintArcRadius = 10
				BlueprintArcSpriteSegments = 64

				CoverageSectorArc
				{
					Texture = &/INDICATORS/VerticalGradient
					VertexColor = [255, 255, 255, 51]
					QuadCount = 64
				}
			}
			ReloadProgressBar
			{
				Type = ProgressBar
				OperationalToggle = IsOperational
				ShowProgressFor = Turret
				Invert = false
			}
			ReloadProgressBar2
			{
				Type = ProgressBar
				OperationalToggle = IsOperational
				ShowProgressFor = Turret2
				Invert = false
			}

			ReloadProgressBar3
			{
				Type = ProgressBar
				OperationalToggle = IsOperational
				ShowProgressFor = Turret3
				Invert = false
			}

			ReloadProgressBar4
			{
				Type = ProgressBar
				OperationalToggle = IsOperational
				ShowProgressFor = Turret4
				Invert = false
			}

			BeamEmitter : &<../../../shots/memitter_phaser_beam_combat/memitter_phaser_beam_combat.rules>
			{
				Type = BeamEmitter
				Location = [0.45, 0]
				ChainedTo = Turret
				FireTrigger = Turret
				GetTargetFrom = Turret
				OperationalToggle = IsOperational
				FireDelay = 0
				ResourceStorage = BatteryStorage
				ResourcesUsed = 500
				MinResourcesUsed = 1
				Burst = 6
					BurstDelay = 0.15
					UseResourcePerShotInBurst = true

			}

			Emitter1a : BeamEmitter
			{
				FireTrigger = Turret
				Location = [0.45, 0]
			}

			Emitter1b : BeamEmitter
			{
				FireTrigger = Turret
				Location = [0.45, 0]
			}

			BeamEmitter2 : &<../../../shots/memitter_phaser_beam_combat/memitter_phaser_beam_combat.rules>
			{
				Type = BeamEmitter
				Location = [0.45, 1]
				ChainedTo = Turret2
				FireTrigger =Turret2
				GetTargetFrom = Turret2
				OperationalToggle = IsOperational2
				FireDelay = 0
				ResourceStorage = BatteryStorage
				ResourcesUsed = 500
				MinResourcesUsed = 1
				Burst = 6
					BurstDelay = 0.15
					UseResourcePerShotInBurst = true

			}

			Emitter2a : BeamEmitter
			{
				FireTrigger = Turret2
				Location = [0.45, 1]
			}

			Emitter2b : BeamEmitter
			{
				FireTrigger = Turret2
				Location = [0.45, 1]
			}

			BeamEmitter3 : &<../../../shots/memitter_phaser_beam_combat/memitter_phaser_beam_combat.rules>
			{
				Type = BeamEmitter
				Location = [0.45, 0]
				ChainedTo = Turret3
				FireTrigger = Turret3
				GetTargetFrom = Turret3
				OperationalToggle = IsOperational
				FireDelay = 0
				ResourceStorage = BatteryStorage
				ResourcesUsed = 500
				MinResourcesUsed = 1
				Burst = 6
					BurstDelay = 0.15
					UseResourcePerShotInBurst = true

			}

			Emitter3a : BeamEmitter
			{
				FireTrigger = Turret3
				Location = [0.45, 0]
			}

			Emitter3b : BeamEmitter
			{
				FireTrigger = Turret3
				Location = [0.45, 0]
			}

			BeamEmitter4 : &<../../../shots/memitter_phaser_beam_combat/memitter_phaser_beam_combat.rules>
			{
				Type = BeamEmitter
				Location = [0.45, 0]
				ChainedTo = Turret4
				FireTrigger = Turret4
				GetTargetFrom = Turret4
				OperationalToggle = IsOperational
				FireDelay = 0
				ResourceStorage = BatteryStorage
				ResourcesUsed = 500
				MinResourcesUsed = 1
				Burst = 6
					BurstDelay = 0.15
					UseResourcePerShotInBurst = true

			}

			Emitter4a : BeamEmitter
			{
				FireTrigger = Turret4
				Location = [0.45, 0]
			}

			Emitter4b : BeamEmitter
			{
				FireTrigger = Turret4
				Location = [0.45, 0]
			}

			ChargeEffect
			{
				Type = TriggeredEffects
				ChainedTo = Turret
				Trigger = Turret
				Location = [0.5, 3]
				AnchorMediaEffects = true

				MediaEffects
				[
					: /BASE_SOUNDS/AudioExterior
					{
						Sound = "charge.wav"
						Volume = .25
						Speed = 1.5
					}
				]
			}

			ChargeEffect2
			{
				Type = TriggeredEffects
				ChainedTo = Turret2
				Trigger = Turret2
				Location = [0.5, 3]
				AnchorMediaEffects = true

				MediaEffects
				[
					: /BASE_SOUNDS/AudioExterior
					{
						Sound = "charge.wav"
						Volume = .25
						Speed = 1.5
					}
				]
			}

			ChargeEffect3
			{
				Type = TriggeredEffects
				ChainedTo = Turret3
				Trigger = Turret3
				Location = [0.5, 3]
				AnchorMediaEffects = true

				MediaEffects
				[
					: /BASE_SOUNDS/AudioExterior
					{
						Sound = "charge.wav"
						Volume = .25
						Speed = 1.5
					}
				]
			}

			ChargeEffect4
			{
				Type = TriggeredEffects
				ChainedTo = Turret4
				Trigger = Turret4
				Location = [0.5, 3]
				AnchorMediaEffects = true

				MediaEffects
				[
					: /BASE_SOUNDS/AudioExterior
					{
						Sound = "charge.wav"
						Volume = .25
						Speed = 1.5
					}
				]
			}

			WeaponSprite
			{
				Type = Sprite
				//ChainedTo = Turret
				OperationalToggle = IsOperational
				Location = [0.5, 3]
				Rotation = 0d
				Layer = "roof_doodads"
				ResetAnimationTrigger = Turret
				AtlasSprite
				{
					AnimationFiles
					[
						"animation/weapon01.png"
						"animation/weapon02.png"
						"animation/weapon03.png"
						"animation/weapon04.png"
						"animation/weapon05.png"
						"animation/weapon06.png"
						"animation/weapon07.png"
						"animation/weapon08.png"
						"animation/weapon09.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon11.png"
						"animation/weapon11.png"
						"animation/weaponX.png"
					]
					Size = [1, 6]
					AnimationInterval = 0.035
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			}
		

			WeaponSprite2
			{
				Type = Sprite
				//ChainedTo = Turret
				OperationalToggle = IsOperational
				Location = [0.5, 3]
				Rotation = 0d
				Layer = "roof_doodads"
				ResetAnimationTrigger = Turret2
				AtlasSprite
				{
					AnimationFiles
					[
						"animation/weapon01.png"
						"animation/weapon02.png"
						"animation/weapon03.png"
						"animation/weapon04.png"
						"animation/weapon05.png"
						"animation/weapon06.png"
						"animation/weapon07.png"
						"animation/weapon08.png"
						"animation/weapon09.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon11.png"
						"animation/weapon11.png"
						"animation/weaponX.png"
					]
					Size = [1, 6]
					AnimationInterval = 0.035
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			}
		

			WeaponSprite3
			{
				Type = Sprite
				//ChainedTo = Turret
				OperationalToggle = IsOperational
				Location = [0.5, 3]
				Rotation = 0d
				Layer = "roof_doodads"
				ResetAnimationTrigger = Turret3
				AtlasSprite
				{
					AnimationFiles
					[
						"animation/weapon01.png"
						"animation/weapon02.png"
						"animation/weapon03.png"
						"animation/weapon04.png"
						"animation/weapon05.png"
						"animation/weapon06.png"
						"animation/weapon07.png"
						"animation/weapon08.png"
						"animation/weapon09.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon11.png"
						"animation/weapon11.png"
						"animation/weaponX.png"
					]
					Size = [1, 6]
					AnimationInterval = 0.035
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			}

			WeaponSprite4
			{
				Type = Sprite
				//ChainedTo = Turret
				OperationalToggle = IsOperational
				Location = [0.5, 3]
				Rotation = 0d
				Layer = "roof_doodads"
				ResetAnimationTrigger = Turret4
				AtlasSprite
				{
					AnimationFiles
					[
						"animation/weapon01.png"
						"animation/weapon02.png"
						"animation/weapon03.png"
						"animation/weapon04.png"
						"animation/weapon05.png"
						"animation/weapon06.png"
						"animation/weapon07.png"
						"animation/weapon08.png"
						"animation/weapon09.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon10.png"
						"animation/weapon11.png"
						"animation/weapon11.png"
						"animation/weaponX.png"
					]
					Size = [1, 6]
					AnimationInterval = 0.035
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			}
	    }
		

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 3]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [.5, .5]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					//Delay = 0.49
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [.5, .5]
					}
				}
				
			]
		}
    }	
Stats
{
	PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
	MinPower = (&../StatsByCategory/0/Stats/PowerUsageContinuous) / 2
	RecPower = &../StatsByCategory/0/Stats/PowerUsageContinuous
	RecCrew = (&RecPower) * 4
}


StatsByCategory
[
	{
		NameKey = "StatCategories/PDShot"
		Stats
		{
			ShotDamagePerShot = (&~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/Damage) * ((&~/Part/Components/BeamEmitter/Duration)/(&~/Part/Components/BeamEmitter/HitInterval))
			ShotDamagePerSecond = (&ShotDamagePerShot) * (&ROF)
			ShotDamage = [&../ShotDamagePerShot, &../ShotDamagePerSecond]
			DamagePerShot = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/Damage
			HitInterval = &~/Part/Components/BeamEmitter/HitInterval
			BurstDuration = &~/Part/Components/BeamEmitter/Duration
			BurstDamage = (&DamagePerShot) * ((&BurstDuration) / (&HitInterval))
			ROF = 1 / (&~/Part/Components/Turret/FireInterval)
			DamagePerSecond = (&BurstDamage) * (&ROF)
			Damage = [&../BurstDamage, &../DamagePerSecond]
			RangeLimited = [&~/Part/Components/BeamEmitter/Range/BaseValue, &~/Part/Components/BeamEmitter/Range/MaxValue]
			Arc = deg(&~/Part/Components/Turret/FiringArc)
			TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
			ShotSpeed = Infinity
			PowerPerShot = (&~/Part/Components/BeamEmitter/ResourcesUsed) / 1000
			PowerUsageContinuous = (&PowerPerShot) / (&~/Part/Components/Turret/FireInterval)
		}
	}
]
	
