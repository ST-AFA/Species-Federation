Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/Phaser_Pointdefense"
	IconNameKey = "Parts/Phaser_Pointdefense_Icon"
	ID = "stafa.phaser_point_defense"
	OtherIDs = [phaser_point_defense]
	EditorGroups = ["Starfleet"]
	DescriptionKey = "Parts/Phaser_Pointdefense_Desc"
	Resources
	[
		[steel, 8]
		[coil, 8]
		[diamond, 1]
	]
	Cost = 5000
	AIValue = 5
	TypeCategories = [weapon, uses_power, is_crewed, turret]
	Size = [1, 3]
	PhysicalRect = [0, 1, 1, 2]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 4000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ReceivableBuffs : ^/0/ReceivableBuffs [CaptainsRoomBuff, AntimatterPower]
	AllowedDoorLocations
	[
		[-1, 2]
		[1, 2]
		[0, 3]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [21, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		
		//***********
		FirePrefToggle
		{
			Type = UIToggle
			ToggleID = "fire_pref"
			Default = 1
		}
		FirePrefAttack
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [0, 2]
		}
		FirePrefDefend
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [1, 2]
		}
		AttackToggle
		{
			Type = MultiToggle
			Toggles = [FireModeToggle, FirePrefAttack]
			Mode = All
		}
		DefendToggle
		{
			Type = MultiToggle
			Toggles = [FireModeToggle, FirePrefDefend]
			Mode = All
		}
		//***********

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperarionalToggle = PowerToggle
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 2.0]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/laser_blaster_small/floor.png"
						Size = [1, 2]
					}
					{
						File = "./Data/ships/terran/laser_blaster_small/floor_33.png"
						Size = [1, 2]
					}
					{
						File = "./Data/ships/terran/laser_blaster_small/floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.515]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.15
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.515]
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/laser_blaster_small/walls.png"
						Size = [1, 2]
					}
					{
						File = "./Data/ships/terran/laser_blaster_small/walls_33.png"
						Size = [1, 2]
					}
					{
						File = "./Data/ships/terran/laser_blaster_small/walls_66.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 2]
					}
					{
						File = "roof_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_doodads"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [1, 1]
					}
					{
						File = "roof_windows_on_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_windows_on_66.png"
						Size = [1, 1]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_doodads"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [1, 1]
					}
					{
						File = "roof_windows_off_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_windows_off_66.png"
						Size = [1, 1]
					}
				]
			}
		}

	    Turret
		{
			Type = TurretWeapon
			Location = [.5, 0.9]//0.46]
			Rotation = -90d
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
//			EstimateFirepowerToggle = AttackToggle
			FireInterval = 2.0
//			SpawnLoc = [0, 0]
			FiringArc = 190d//180d
			RotateSpeed = 120d//60d
			FireThresholdAngle = 1d
			TargetSearchesPerSecond = 8 // Default is 2.
			HoldTargetAfterCancel = 0.5
			AIFirepowerRating = 400
			Emitter = BeamEmitter

			AutoTargets
			[
				{
					TargetType = Bullets
					BulletTargetCategories = [missile, mine]
					Toggle = DefendToggle
				}
				{
					TargetType = ShipParts
					Toggle = AttackToggle
					Overridable = true
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		BeamEmitter : &<../../../shots/phaser_beam_pd/phaser_beam_pd.rules>
		{
			Type = BeamEmitter
			Location = [0.45, 0]
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			OperationalToggle = IsOperational
			FireDelay = 0
			ResourceStorage = BatteryStorage
			ResourcesUsed = 500
			MinResourcesUsed = 1
		}



		CrewLocation
		{
			Type = CrewLocation
			Location = [.5, 2.35]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation/Location
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		//TurretCollider
		//{
		//	Type = CircleCollider
//		//	ChainedTo = Turret
		//	Radius = .35
		//	Density = .5
		//}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0.0, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret_on.png"
						Size = [1, 1]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret_off.png"
						Size = [1, 1]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 1.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 3]
		}

	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		MinPower = (&../StatsByCategory/0/Stats/PowerUsageContinuous) / 2
		RecPower = &../StatsByCategory/0/Stats/PowerUsageContinuous
		MinCrew = (&CrewRequired) + (&MinPower) * 2
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/PDShot"
			Stats
			{
				ShotDamagePerShot = (&~/Part/Components/BeamEmitter/HitNothing/HitEffects/0/TotalDamage) * ((&~/Part/Components/BeamEmitter/Duration)/(&~/Part/Components/BeamEmitter/HitInterval))
				ShotDamagePerSecond = (&ShotDamagePerShot) * (&ROF)
				ShotDamage = [&../ShotDamagePerShot, &../ShotDamagePerSecond]
				
				DamagePerShot = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/Damage
//				DamagePerShot = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/HitEffects/0/Damage
				HitInterval = &~/Part/Components/BeamEmitter/HitInterval
				BurstDuration = &~/Part/Components/BeamEmitter/Duration
				BurstDamage = (&DamagePerShot) * ((&BurstDuration) / (&HitInterval))
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				DamagePerSecond = (&BurstDamage) * (&ROF)
				Damage = [&../BurstDamage, &../DamagePerSecond]
				RangeLimited = [&~/Part/Components/BeamEmitter/Range/BaseValue, &~/Part/Components/BeamEmitter/Range/MaxValue]
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = Infinity
				PowerPerShot = (&~/Part/Components/BeamEmitter/ResourcesUsed) / 1000
				PowerUsageContinuous = (&PowerPerShot) / (&~/Part/Components/Turret/FireInterval)
			}
		}
	]
}
